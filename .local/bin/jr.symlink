#!/usr/bin/env bash

set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
    set -o errexit
    set -o nounset
fi

# Colors
export red='\033[0;31m'
export green='\033[0;32m'
export blue='\033[0;34m'
export yellow='\033[0;33m'
export magenta='\033[0;35m'
export cyan='\033[0;36m'
export white='\033[0;37m'
export normal='\033[0m'

usage() {
    echo -e "\n${magenta}Usage: ${blue}jr ${yellow}<command>${normal}

My command line interface to Jira.

Commands are:
 - epics
 - stories
 - sprint
 - add
 - move
"
}

epics() {
    # This function makes use of jira-cli, found here:
    #   https://github.com/ankitpokhrel/jira-cli
    # and fzf found here:
    #   https://github.com/junegunn/fzf
    if [[ -z "${1}" ]]; then
        echo "You must provide a project."
        return 1
    else
        local project=${1}
    fi

    jira issue list -tEpic --project $project \
        --plain --columns KEY,SUMMARY,STATUS,REPORTER --no-headers \
        | fzf  \
        --bind 'enter:execute(echo {1})+abort' \
        --header="Epics" \
        --preview="jira issue view {1}" \
        --preview-window=top
}

stories() {
    # This function makes use of jira-cli, found here:
    #   https://github.com/ankitpokhrel/jira-cli
    # and fzf found here:
    #   https://github.com/junegunn/fzf
    local project
    if [[ -z "${1}" ]]; then
        project=$(_default_project)
        echo $project
    else
        project=${1}
    fi

    # If there is a second argument and it is the word "mine", then only
    # display my stories.
    if [[ -n "${2}" ]] && [[ "${2}" == "mine" ]]; then
        local assignee=$(jira me)
        local columns="key,summary,status,"
    elif [[ -n "${2}" ]]; then
        local assignee=${2}
        local columns="key,summary,status,"
    else
        local assignee=""
        local columns="key,summary,status,assignee"
    fi

    _all_issues "${project}" "${assignee}" "${columns}" \
        | fzf  \
        --bind 'enter:execute(echo {1})+abort' \
        --header="$project $assignee open stories" \
        --preview="jira issue view {1}" \
        --preview-window=top
}

move() {
    local issues
    if [[ $# -eq 0 ]]; then
        issues=$(sprint)
    else
        issues=$@
    fi

    if [[ -z "${issues}" ]]; then
        echo "No issue selected."
        return 1
    else
        echo "Moving issue(s) $issues"
    fi

    local state
    echo -e "Move to state:\n"
    echo "1) Refined"
    echo "2) In Progress"
    echo "3) In Review"
    echo "4) Merged"
    echo "5) Done"
    
    read -p "New state: " state
    
    case $state in
        1) state="Refine" ;;
        2) state="Start Dev" ;;
        3) state="Submit for Review" ;;
        4) state="Passed Review" ;;
        5) state="Close Issue" ;;
        *) echo "Invalid option"; return ;;
    esac

    # Move all issues found in the space separated list `issues` to the new
    # state `state`.
    for issue in $issues; do
        echo -e "\n ðŸšš  Moving ${green}$issue${normal} to ${magenta}$state${normal}"
        jira issue move ${issue} "${state}"
        # If the command failed, sleep for longer
        if [[ $? -ne 0 ]]; then
            sleep 5
        fi
    done
    sleep 1
}

_all_issues() {
    local project=${1}
    local assignee=${2}
    local columns=${3}
    jira issues list \
        --jql "project = $project" \
        --project "$project" \
        --status "~Closed" \
        --assignee "$assignee" \
        --order-by status,updated \
        --type "~Epic" \
        --plain \
        --columns "$columns" \
        --no-headers
}

_current_sprint_id() {
    local project=${1}

    jira sprint list \
        --state=active \
        --table \
        --plain \
        --columns id,name \
        --no-headers \
    | grep $project | cut -f1
}

_current_sprint_issues() {
    local project=${1}

    jira issues list \
        --plain \
        --no-headers \
        --columns key,summary,status,assignee \
        --jql "sprint = $(_current_sprint_id $project)"
}

sprint() {
    # If there's an argument, then use it as the project. Otherwise, use the
    # default project.
    if [[ -n "${1}" ]]; then
        local project=${1}
    else
        local project=$(_default_project)
    fi

    # This function makes use of jira-cli, found here:
    #   https://github.com/ankitpokhrel/jira-cli
    _current_sprint_issues $project \
        | fzf \
        --bind 'enter:execute(echo {+1})+abort' \
        --bind "ctrl-n:execute(jr move {+1})+reload(jr _current_sprint_issues $project)" \
        --bind "ctrl-r:reload(jr _current_sprint_issues $project)" \
        --header="Current $project sprint" \
        --preview="jira issue view {1}" \
        --preview-window=top \
        --multi
}

_default_project() {
    sed -n '/project:/,/ key:/ {s/\s*key:\s*\(\w*\)/\1/p}' \
        ~/.config/.jira/.config.yml
}

add() {
    # This function makes use of jira-cli, found here:
    #   https://github.com/ankitpokhrel/jira-cli
    
    # Read default project from config file.
    local default_project=$(_default_project)
    if [[ -z "${1}" ]]; then
        read -p "Which project? [$default_project]: " project
        if [[ -z "${project}" ]]; then
            local project=$default_project
        fi
    else
        local project=${1}
    fi

    if [[ -z "${2}" ]]; then
        read -p "Which epic? [enter to interactively choose]: " _epic_key
        local epic_key=${_epic_key}
        if [[ -z "${epic_key}" ]]; then
            local epic_key=$(jr epics $project)
        fi
    else
        local epic_key=${2}
    fi

    read -p "Capitalizable? [Y/n]: " capitalizable
    if [[ -z "${capitalizable}" ]]; then
        local capitalizable="Yes"
    else
        case $capitalizable in
            yes|YES|Y|y) local capitalizable="Yes" ;;
            *) local capitalizable="No" ;;
        esac
    fi

    read -p "Acceptance Criteria: " acceptance_criteria

    read -p "Assignee ['me' to self-assign]: " assignee
    # If assignee is equal to 'me', then set it to the current user.
    if [[ "${assignee}" == "me" ]]; then
        assignee=$(jira me)
        # Strip everything after the @-sign.
        assignee=${assignee%@*}
    fi

    read -p "Story Points: " story_points

    jira issue create \
        --template $GRUBHUB_DIR/.jira.tmpl \
        --type Story \
        --project $project \
        --parent $epic_key \
        --assignee $assignee \
        --custom "capitalizable?"=$capitalizable \
        --custom "acceptance-criteria"=$acceptance_criteria \
        --custom "story-points"=$story_points
}

main() {
    if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
        usage
        return 0
    elif [[ $# -eq 0 ]]; then
        usage
        return 1
    fi

    # Execute the correct function based on the first argument.
    case "$1" in
        "sprint")
            shift
            sprint "$@"
            ;;
        "epics")
            shift
            epics "$@"
            ;;
        "stories")
            shift
            stories "$@"
            ;;
        "add")
            shift
            add "$@"
            ;;
        "move")
            shift
            move "$@"
            ;;
        "_current_sprint_issues")
            shift
            _current_sprint_issues "$@"
            ;;
        "_all_issues")
            shift
            _all_issues "$@"
            ;;
        *)
            usage
            ;;
    esac
}

main "$@"
