# Memory

## Problem-Solving

When you're stuck or confused:

1. **Stop** - Don't spiral into complex solutions
2. **Delegate** - Consider spawning agents for parallel investigation
3. **Ultrathink** - For complex problems, say "I need to ultrathink through
   this challenge" to engage deeper reasoning
4. **Step back** - Re-read the requirements
5. **Simplify** - The simple solution is usually correct
6. **Ask** - "I see two approaches: [A] vs [B]. Which do you prefer?"

My insights on better approaches are valued - please ask for them!

## Optimize Parallel Tool Calling

For maximum efficiency, whenever you need to perform multiple independent
operations, invoke all relevant tools simultaneously rather than sequentially.

## Contributing

When contributing code:

1. Try keeping things as simple as possible, but no simpler.
2. Favor functions over classes.
3. Follow established codebase patterns.

### A task is done when:
- All linters pass with zero issues
- All tests pass
- Feature works end-to-end
- Old code is deleted
- Docstrings are written

#### VCS

Most projects use Git, but some projects use Jujutsu. Learn more
about Jujutsu (aka `jj`) here:
https://jj-vcs.github.io/jj/v0.30.0/cli-reference/.

## Learning

If you need to learn more about a command or another project, use the
`gitingest` CLI. This will produce a file 'digest.txt' containing a digest of
the project.

<!-- vim: set filetype=markdown: -->
