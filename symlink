#!/usr/bin/env python3

import argparse
import logging
import os
import os.path as path
import shutil

BASE_DIR = "."
dryrun = False


def parse():
    parser = argparse.ArgumentParser(
        description="Symlinks all files having extension '.symlink'."
    )
    parser.add_argument(
        "-o",
        "--overwrite-all",
        help="Overwrite everything by default.",
        action="store_true",
    )
    parser.add_argument(
        "-b", "--backup-all", help="Backup everything by default.", action="store_true"
    )
    parser.add_argument(
        "-c",
        "--create-paths",
        help="Automatically create non-existent paths.",
        action="store_true",
    )
    parser.add_argument(
        "-d", "--dryrun", help="Run in dry-run mode", action="store_true"
    )
    parser.add_argument("-l", "--loglevel", help="Log level", default="error")

    return parser.parse_args()


def confirm(question):
    while True:
        response = input("%s [Y/n] " % (question)).lower()
        if not response:
            return True
        if response in ["y", "yes"]:
            return True
        if response in ["n", "no"]:
            return False
        print("Please specify '(y)es' or '(n)o'.")


def get_symlinks():
    symlinks = []
    for dirpath, dirnames, filenames in os.walk(BASE_DIR):
        link_name = path.normpath(path.expanduser(path.join("~", dirpath)))
        source = path.abspath(dirpath)

        if ".git" in dirnames:
            del dirnames[dirnames.index(".git")]

        for name in filenames + dirnames:
            root, ext = path.splitext(name)
            if ext == ".symlink":
                symlinks.append((path.join(source, name), path.join(link_name, root)))
    return symlinks


def set_logger(level):
    global log
    logformat = "%(asctime)s [%(levelname)s] %(message)s"

    log = logging.getLogger()
    log.setLevel(level)

    # Logging to the console
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(logformat))
    log.addHandler(handler)


def symlink(overwrite_all=False, backup_all=False, create_paths=False):
    skip_all = False
    for source, link_name in get_symlinks():
        overwrite = backup = False
        dirname = path.dirname(link_name)

        if path.lexists(link_name):
            if skip_all:
                continue

            if not (overwrite_all or backup_all or dryrun):
                if path.islink(link_name):
                    answer = input(
                        "Symbolic link %r already exists.\n"
                        "What do you want to do? "
                        "[s]kip, [S]kip all existing, [o]verwrite, "
                        "[O]verwrite all existing: " % link_name
                    )
                else:
                    answer = input(
                        "File %r already exists.\n"
                        "What do you want to do? "
                        "[s]kip, [S]kip all, [o]verwrite, [O]verwrite all,"
                        " [b]ackup, [B]ackup all: " % link_name
                    )
                if answer == "O":
                    overwrite_all = True
                elif answer == "o":
                    overwrite = True
                elif answer == "B":
                    backup_all = True
                elif answer == "b":
                    backup = True
                elif answer == "S":
                    skip_all = True
                    continue
                elif answer == "s":
                    continue
                else:
                    return

            if backup or backup_all:
                if not dryrun:
                    try:
                        os.rename(link_name, f"{link_name}.backup")
                    except OSError as error:
                        if error.errno != 30:  # Read-only file system
                            raise
                log.info(f"renamed {link_name} -> {link_name}.backup")

            if overwrite or overwrite_all:
                if not dryrun:
                    try:
                        os.remove(link_name)
                    except (OSError, FileNotFoundError):
                        try:
                            shutil.rmtree(link_name)
                        except (OSError, FileNotFoundError):
                            pass
                log.info(f"removed {link_name}")

        elif not path.exists(dirname):
            if create_paths or confirm(
                "Path {!r} does not exists. Create?".format(dirname)
            ):
                if not dryrun:
                    os.makedirs(dirname)
                log.info(f"created dir {dirname}")
            else:
                print("Skipping {!r}".format(link_name))
                continue

        try:
            if not dryrun:
                os.symlink(source, link_name)

            log.info(f"symlinked {source} -> {link_name}")
        except Exception as exception:
            print("Exception {} for {!r}".format(exception, link_name))
            print("An error occured while symlinking {!r}".format(link_name))


if __name__ == "__main__":
    args = parse()
    set_logger(args.loglevel.upper())

    if args.dryrun:
        dryrun = True
        logging.debug("dry-running")

    symlink(args.overwrite_all, args.backup_all, args.create_paths)
